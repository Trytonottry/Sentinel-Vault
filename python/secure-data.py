import os
import hashlib
import secrets
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import base64
import threading
import time
import shutil
import sys

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
DATA_FILE = "sensitive_data.bin"
FRAGMENTS_DIR = "fragments"
KEY_FILE = "master.key"
MAX_RECURSION = 5  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–µ–∫—É—Ä—Å–∏–∏, —á—Ç–æ–±—ã –Ω–µ —É–π—Ç–∏ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å
SALT_FILE = "salt.bin"
TRIGGER_FILE = "access_trigger.lock"  # –§–∞–π–ª-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–ø—ã—Ç–∫–∏ –¥–æ—Å—Ç—É–ø–∞

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∏–∑ –ø–∞—Ä–æ–ª—è ===
def generate_key_from_password(password: str, salt: bytes) -> bytes:
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100_000,
    )
    key = base64.urlsafe_b64encode(kdf.derive(password.encode()))
    return key

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/—á—Ç–µ–Ω–∏–µ —Å–æ–ª–∏ ===
def save_salt(salt: bytes):
    with open(SALT_FILE, "wb") as f:
        f.write(salt)

def load_salt() -> bytes:
    if os.path.exists(SALT_FILE):
        with open(SALT_FILE, "rb") as f:
            return f.read()
    else:
        salt = os.urandom(16)
        save_salt(salt)
        return salt

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
def initialize(password: str):
    if os.path.exists(DATA_FILE):
        print("–î–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")
        return

    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = b"–°–µ–∫—Ä–µ—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –ø–ª–∞–Ω—ã –ø–æ –∑–∞—â–∏—Ç–µ –≥–∞–ª–∞–∫—Ç–∏–∫–∏!"
    salt = load_salt()
    key = generate_key_from_password(password, salt)
    fernet = Fernet(Fernet.generate_key())  # –ö–ª—é—á –¥–ª—è –¥–∞–Ω–Ω—ã—Ö

    # –®–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    encrypted_data = fernet.encrypt(data)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è, –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª–µ–º
    encrypted_key = Fernet(key).encrypt(fernet._encryption_key)

    with open(DATA_FILE, "wb") as f:
        f.write(encrypted_key + b"|||" + encrypted_data)

    print("‚úÖ –î–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã.")

# === –§—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ ===
def fragment_and_encrypt( bytes, password: str, depth: int = 0):
    if depth >= MAX_RECURSION:
        print(f"üõë –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏: {depth}")
        return

    print(f"üîÅ –§—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (—É—Ä–æ–≤–µ–Ω—å {depth})...")

    # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
    frag_dir = os.path.join(FRAGMENTS_DIR, f"level_{depth}")
    os.makedirs(frag_dir, exist_ok=True)

    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ 3 —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
    chunk_size = len(data) // 3 + 1
    fragments = [data[i:i+chunk_size] for i in range(0, len(data), chunk_size)]

    salt = load_salt()
    key = generate_key_from_password(password, salt)
    fernet = Fernet(Fernet.generate_key())

    encrypted_fragments = []
    for i, frag in enumerate(fragments):
        # –ö–∞–∂–¥—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç —à–∏—Ñ—Ä—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        encrypted_frag = fernet.encrypt(frag)
        frag_path = os.path.join(frag_dir, f"frag_{i}.enc")
        with open(frag_path, "wb") as f:
            f.write(encrypted_frag)
        encrypted_fragments.append(encrypted_frag)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
    encrypted_key = Fernet(key).encrypt(fernet._encryption_key)
    with open(os.path.join(frag_dir, "key.enc"), "wb") as kf:
        kf.write(encrypted_key)

    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(fragments)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ {depth}")

    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —à–∏—Ñ—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç (—Å–∏–º—É–ª—è—Ü–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏)
    for i, frag in enumerate(encrypted_fragments):
        fragment_and_encrypt(frag, password, depth + 1)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–≤—Ç–æ—Ä–∂–µ–Ω–∏–µ" ===
def is_intrusion_attempt():
    # –ü—Ä–æ—Å—Ç–æ–π —Ç—Ä–∏–≥–≥–µ—Ä: –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    if os.path.exists(TRIGGER_FILE):
        return True
    return False

def set_intrusion_trigger():
    with open(TRIGGER_FILE, "w") as f:
        f.write("INTRUSION DETECTED AT: " + str(time.time()))

# === –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º ===
def access_data(password: str):
    if not os.path.exists(DATA_FILE):
        print("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –≤—Ç–æ—Ä–∂–µ–Ω–∏—è
    if is_intrusion_attempt():
        print("üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!")
        print("üí• –ó–∞–ø—É—Å–∫ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è...")

        with open(DATA_FILE, "rb") as f:
            raw = f.read()
        # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        os.remove(DATA_FILE)
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞—â–∏—Ç—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=fragment_and_encrypt, args=(raw, password, 0))
        thread.start()
        return

    print("üîì –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞...")
    try:
        with open(DATA_FILE, "rb") as f:
            parts = f.read().split(b"|||")
            if len(parts) != 2:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")

            encrypted_key, encrypted_data = parts

        salt = load_salt()
        key = generate_key_from_password(password, salt)
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∫–ª—é—á
        fernet_master = Fernet(key)
        data_key = fernet_master.decrypt(encrypted_key)
        fernet_data = Fernet(data_key)

        decrypted_data = fernet_data.decrypt(encrypted_data)
        print("üîê –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã:")
        print(decrypted_data.decode('utf-8', errors='replace'))

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {e}")
        # –°–∏–º—É–ª—è—Ü–∏—è –≤—Ç–æ—Ä–∂–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–∞—Ä–æ–ª–µ
        set_intrusion_trigger()
        print("–¢—Ä–∏–≥–≥–µ—Ä –≤—Ç–æ—Ä–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# === –û—á–∏—Å—Ç–∫–∞ ===
def cleanup():
    paths = [DATA_FILE, SALT_FILE, TRIGGER_FILE, FRAGMENTS_DIR, KEY_FILE]
    for path in paths:
        if os.path.exists(path):
            if os.path.isdir(path):
                shutil.rmtree(path)
            else:
                os.remove(path)
    print("üßπ –í—Å—ë –æ—á–∏—â–µ–Ω–æ.")

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def main():
    print("üîê –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö v0.1")
    print("1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
    print("2. –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø")
    print("3. –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë")
    print("4. –í—ã–π—Ç–∏")

    password = "supersecret123"  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ ‚Äî –≤–≤–æ–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    while True:
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")
        if choice == "1":
            initialize(password)
        elif choice == "2":
            access_data(password)
        elif choice == "3":
            cleanup()
        elif choice == "4":
            break
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")

if __name__ == "__main__":
    main()